"""
Uncoder IO Commercial Edition License
-----------------------------------------------------------------
Copyright (c) 2024 SOC Prime, Inc.

This file is part of the Uncoder IO Commercial Edition ("CE") and is
licensed under the Uncoder IO Non-Commercial License (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://github.com/UncoderIO/UncoderIO/blob/main/LICENSE

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-----------------------------------------------------------------
"""
import yaml

from app.translator.core.exceptions.render import BaseRenderException
from app.translator.core.models.platform_details import PlatformDetails
from app.translator.core.models.query_container import RawQueryContainer, TokenizedQueryContainer
from app.translator.core.render import QueryRender
from app.translator.managers import render_manager
from app.translator.platforms.microsoft.const import MICROSOFT_SENTINEL_QUERY_DETAILS
from app.translator.platforms.roota.const import ROOTA_RULE_DETAILS, ROOTA_RULE_TEMPLATE
from app.translator.platforms.sigma.const import SIGMA_RULE_DETAILS

_AUTOGENERATED_TEMPLATE = "Autogenerated RootA Rule"


@render_manager.register
class RootARender(QueryRender):
    details: PlatformDetails = PlatformDetails(**ROOTA_RULE_DETAILS)
    render_manager = render_manager

    def generate(
        self, raw_query_container: RawQueryContainer, tokenized_query_container: TokenizedQueryContainer
    ) -> str:
        if not tokenized_query_container.meta_info:
            raise BaseRenderException("Meta info is required")
        if raw_query_container.language == SIGMA_RULE_DETAILS["platform_id"]:
            query_language = MICROSOFT_SENTINEL_QUERY_DETAILS["platform_id"]
            query = self.render_manager.get(query_language).generate(
                raw_query_container=raw_query_container, tokenized_query_container=tokenized_query_container
            )
        else:
            query_language = raw_query_container.language
            query = raw_query_container.query

        rule = ROOTA_RULE_TEMPLATE.copy()
        rule["name"] = tokenized_query_container.meta_info.title or _AUTOGENERATED_TEMPLATE
        rule["details"] = tokenized_query_container.meta_info.description or rule["details"]
        rule["author"] = tokenized_query_container.meta_info.author or rule["author"]
        rule["severity"] = tokenized_query_container.meta_info.severity or rule["severity"]
        rule["date"] = tokenized_query_container.meta_info.date
        rule["detection"]["language"] = query_language
        rule["detection"]["body"] = query
        rule["license"] = tokenized_query_container.meta_info.license
        rule["references"] = tokenized_query_container.meta_info.references or rule["references"]

        mitre_attack = tokenized_query_container.meta_info.mitre_attack
        tactics = [tactic["external_id"].lower() for tactic in mitre_attack.get("tactics", [])]
        techniques = [technique["technique_id"].lower() for technique in mitre_attack.get("techniques", [])]
        rule["mitre-attack"] = tactics + techniques

        if tokenized_query_container.meta_info.parsed_logsources:
            for logsource_type, value in tokenized_query_container.meta_info.parsed_logsources.items():
                rule["logsource"][logsource_type] = value[0].capitalize()

        return yaml.dump(rule, default_flow_style=False, sort_keys=False, indent=4)
