"""
Uncoder IO Community Edition License
-----------------------------------------------------------------
Copyright (c) 2023 SOC Prime, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-----------------------------------------------------------------
"""

import re

from app.converter.platforms.chronicle.renders.chronicle import ChronicleFieldValue, ChronicleQueryRender
from app.converter.platforms.chronicle.const import DEFAULT_CHRONICLE_SECURITY_RULE, chronicle_rule_details
from app.converter.core.mapping import SourceMapping
from app.converter.core.models.platform_details import PlatformDetails
from app.converter.core.operator_types.output import MetaInfoContainer
from app.converter.tools.utils import concatenate_str, get_author_str

_AUTOGENERATED_TITLE = "Autogenerated Chronicle Security rule"
_AUTOGENERATED_DESCRIPTION = "Autogenerated Chronicle Security rule."


class ChronicleRuleFieldValue(ChronicleFieldValue):
    details: PlatformDetails = chronicle_rule_details

    def equal_modifier(self, field, value):
        if isinstance(value, list):
            return f"({self.or_token.join(self.contains_modifier(field=field, value=v) for v in value)})"
        return f'{self.apply_field(field)} = "{value}"'

    def contains_modifier(self, field, value):
        if isinstance(value, list):
            return f"({self.or_token.join(self.contains_modifier(field=field, value=v) for v in value)})"
        return f're.regex({self.apply_field(field)}, `.*{value}.*`)'

    def endswith_modifier(self, field, value):
        if isinstance(value, list):
            return f"({self.or_token.join(self.endswith_modifier(field=field, value=v) for v in value)})"
        return f're.regex({self.apply_field(field)}, `.*{value}`)'

    def startswith_modifier(self, field, value):
        if isinstance(value, list):
            return f"({self.or_token.join(self.startswith_modifier(field=field, value=v) for v in value)})"
        return f're.regex({self.apply_field(field)}, `{value}.*`)'

    @staticmethod
    def apply_field(field):
        return f"$e.{field}"

    def regex_modifier(self, field, value):
        if isinstance(value, list):
            return f"({self.or_token.join(self.regex_modifier(field=field, value=v) for v in value)})"
        return f're.regex({self.apply_field(field)}, `{value}`)'


class ChronicleSecurityRuleRender(ChronicleQueryRender):
    details: PlatformDetails = chronicle_rule_details
    or_token = "or"
    field_value_map = ChronicleRuleFieldValue(or_token=or_token)

    @staticmethod
    def prepare_title(title: str) -> str:
        if not title:
            return title
        new_title = re.sub(re.compile('[()*‘’:;+!,\\[\\].?`"-/]'), "", title.lower())
        new_title = re.sub(re.compile("\\s"), "_", new_title.lower())
        index = 0
        for i, title_char in enumerate(new_title):
            if not title_char.isdigit():
                index = i
                break
        new_title = new_title[index:]
        new_title = new_title.strip("_")
        return new_title

    def finalize_query(self, prefix: str, query: str, functions: str, meta_info: MetaInfoContainer,
                       source_mapping: SourceMapping = None, not_supported_functions: list = None) -> str:
        query = super().finalize_query(prefix=prefix, query=query, functions=functions, meta_info=meta_info)
        rule = DEFAULT_CHRONICLE_SECURITY_RULE.replace("<query_placeholder>", query)
        rule = rule.replace("<title_place_holder>", self.prepare_title(meta_info.title) or _AUTOGENERATED_TITLE)
        description = meta_info.description or _AUTOGENERATED_DESCRIPTION
        description = concatenate_str(description, get_author_str(meta_info.author))
        rule = rule.replace("<description_place_holder>", description)
        rule = rule.replace("<licence_place_holder>", meta_info.license)
        rule = rule.replace("<rule_id_place_holder>", meta_info.id)
        rule = rule.replace("<severity_place_holder>", meta_info.severity)
        rule = rule.replace("<status_place_holder>", meta_info.status)
        return rule
